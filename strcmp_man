       • 0, if the s1 and s2 are equal;

       • a negative value if s1 is less than s2;

       • a positive value if s1 is greater than s2.

       The strncmp() function is similar, except it compares only the first (at most) n bytes of s1 and s2.

RETURN VALUE
       The  strcmp()  and  strncmp()  functions return an integer less than, equal to, or greater than zero if s1 (or the first n bytes thereof) is found, respectively, to be less than, to match, or be greater
       than s2.

       In  glibc,  as  in most other implementations, the return value is the arithmetic result of subtracting the last compared byte in s2 from the last compared byte in s1.  (If the two characters are equal,
       this difference is 0.)

EXAMPLES
       The program below can be used to demonstrate the operation of strcmp() (when given two arguments) and strncmp() (when given three arguments).  First, some examples using strcmp():

           $ ./string_comp ABC ABC
           <str1> and <str2> are equal
           $ ./string_comp ABC AB      # 'C' is ASCII 67; 'C' - ' ' = 67
           <str1> is greater than <str2> (67)
           $ ./string_comp ABA ABZ     # 'A' is ASCII 65; 'Z' is ASCII 90
           <str1> is less than <str2> (-25)
           $ ./string_comp ABJ ABC
           <str1> is greater than <str2> (7)
           $ ./string_comp $'\201' A   # 0201 - 0101 = 0100 (or 64 decimal)
           <str1> is greater than <str2> (64)
           $ ./string_comp ABC AB 3
           <str1> is greater than <str2> (67)
           $ ./string_comp ABC AB 2
           <str1> and <str2> are equal in the first 2 bytes
       /* string_comp.c

          Licensed under GNU General Public License v2 or later.
       */
       #include <stdio.h>
